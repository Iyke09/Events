// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test suites for Home component admin component calls componentwillrecieveprops with newprops 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="Admin"
  >
    <div
      className="row"
    >
      
      <Navigator
        activeRoute={[Function]}
        clearForm={[Function]}
      />
      <div
        className="col s12 m12 l8 "
      >
        
        <div
          className="card "
          style={
            Object {
              "backgroundColor": "#FBFCFC",
              "marginTop": 20,
            }
          }
        >
          <div
            className="card-content "
          >
            
            <Form
              activeRoute={[Function]}
              handleProgress={[Function]}
              handleSubmit={[Function]}
              handleUploadError={[Function]}
              handleUploadStart={[Function]}
              handleUploadSuccess={[Function]}
              loader={undefined}
              onChange={[Function]}
              state={
                Object {
                  "avatar": "",
                  "avatarURL": "",
                  "capacity": "",
                  "description": "",
                  "image": "",
                  "isUploading": false,
                  "location": "",
                  "name": "",
                  "price": "",
                  "progress": 0,
                  "username": "",
                }
              }
            />
          </div>
        </div>
      </div>
    </div>
  </div>,
  "nodes": Array [
    <div
      className="Admin"
    >
      <div
        className="row"
      >
        
        <Navigator
          activeRoute={[Function]}
          clearForm={[Function]}
        />
        <div
          className="col s12 m12 l8 "
        >
          
          <div
            className="card "
            style={
              Object {
                "backgroundColor": "#FBFCFC",
                "marginTop": 20,
              }
            }
          >
            <div
              className="card-content "
            >
              
              <Form
                activeRoute={[Function]}
                handleProgress={[Function]}
                handleSubmit={[Function]}
                handleUploadError={[Function]}
                handleUploadStart={[Function]}
                handleUploadSuccess={[Function]}
                loader={undefined}
                onChange={[Function]}
                state={
                  Object {
                    "avatar": "",
                    "avatarURL": "",
                    "capacity": "",
                    "description": "",
                    "image": "",
                    "isUploading": false,
                    "location": "",
                    "name": "",
                    "price": "",
                    "progress": 0,
                    "username": "",
                  }
                }
              />
            </div>
          </div>
        </div>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_context": Object {},
      "_currentElement": <Admin
        centers={
          Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ]
        }
        errorAction={[Function]}
        getCenters={[Function]}
        getSingle={[Function]}
        location={
          Object {
            "pathname": "edit",
          }
        }
        mock="hello"
        params={
          Object {
            "id": 1,
          }
        }
        single="helloo0"
      />,
      "_instance": Admin {
        "_reactInternalInstance": [Circular],
        "activeRoute": [Function],
        "clearForm": [Function],
        "closeErrMsg": [Function],
        "context": Object {},
        "getMore": [Function],
        "handleProgress": [Function],
        "handleSubmit": [Function],
        "handleUploadError": [Function],
        "handleUploadStart": [Function],
        "handleUploadSuccess": [Function],
        "onChange": [Function],
        "props": Object {
          "centers": Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ],
          "errorAction": [Function],
          "getCenters": [Function],
          "getSingle": [Function],
          "location": Object {
            "pathname": "edit",
          },
          "mock": "hello",
          "params": Object {
            "id": 1,
          },
          "single": "helloo0",
        },
        "refs": Object {},
        "searchCenter": [Function],
        "state": Object {
          "avatar": "",
          "avatarURL": "/img08.jpeg",
          "capacity": "",
          "description": "",
          "image": "/img08.jpeg",
          "isUploading": false,
          "location": "",
          "name": "",
          "price": "",
          "progress": 0,
          "username": "",
        },
        "updateCenter": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 8,
      "_nativeContainerInfo": null,
      "_nativeParent": null,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="Admin"
        >
          <div
            className="row"
          >
            
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              <div
                className="card "
                style={
                  Object {
                    "backgroundColor": "#FBFCFC",
                    "marginTop": 20,
                  }
                }
              >
                <div
                  className="card-content "
                >
                  
                  <Form
                    activeRoute={[Function]}
                    handleProgress={[Function]}
                    handleSubmit={[Function]}
                    handleUploadError={[Function]}
                    handleUploadStart={[Function]}
                    handleUploadSuccess={[Function]}
                    loader={undefined}
                    onChange={[Function]}
                    state={
                      Object {
                        "avatar": "",
                        "avatarURL": "/img08.jpeg",
                        "capacity": "",
                        "description": "",
                        "image": "/img08.jpeg",
                        "isUploading": false,
                        "location": "",
                        "name": "",
                        "price": "",
                        "progress": 0,
                        "username": "",
                      }
                    }
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
        "_renderedOutput": <div
          className="Admin"
        >
          <div
            className="row"
          >
            
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              <div
                className="card "
                style={
                  Object {
                    "backgroundColor": "#FBFCFC",
                    "marginTop": 20,
                  }
                }
              >
                <div
                  className="card-content "
                >
                  
                  <Form
                    activeRoute={[Function]}
                    handleProgress={[Function]}
                    handleSubmit={[Function]}
                    handleUploadError={[Function]}
                    handleUploadStart={[Function]}
                    handleUploadSuccess={[Function]}
                    loader={undefined}
                    onChange={[Function]}
                    state={
                      Object {
                        "avatar": "",
                        "avatarURL": "/img08.jpeg",
                        "capacity": "",
                        "description": "",
                        "image": "/img08.jpeg",
                        "isUploading": false,
                        "location": "",
                        "name": "",
                        "price": "",
                        "progress": 0,
                        "username": "",
                      }
                    }
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": null,
      "_topLevelWrapper": null,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Admin
    centers={
      Array [
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 33,
              "userId": 11,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium3",
          "price": 400,
        },
      ]
    }
    errorAction={[Function]}
    getCenters={[Function]}
    getSingle={[Function]}
    location={
      Object {
        "pathname": "edit",
      }
    }
    mock="hello"
    params={
      Object {
        "id": 1,
      }
    }
    single="helloo0"
  />,
}
`;

exports[`Test suites for Home component admin component calls componentwillrecieveprops with newprops 2`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="Admin"
  >
    <div
      className="row"
    >
      
      <Navigator
        activeRoute={[Function]}
        clearForm={[Function]}
      />
      <div
        className="col s12 m12 l8 "
      >
        
        <div
          className="card "
          style={
            Object {
              "backgroundColor": "#FBFCFC",
              "marginTop": 20,
            }
          }
        >
          <div
            className="card-content "
          >
            
            <Form
              activeRoute={[Function]}
              handleProgress={[Function]}
              handleSubmit={[Function]}
              handleUploadError={[Function]}
              handleUploadStart={[Function]}
              handleUploadSuccess={[Function]}
              loader={undefined}
              onChange={[Function]}
              state={
                Object {
                  "avatar": "",
                  "avatarURL": "",
                  "capacity": "",
                  "description": "",
                  "image": "",
                  "isUploading": false,
                  "location": "",
                  "name": "",
                  "price": "",
                  "progress": 0,
                  "username": "",
                }
              }
            />
          </div>
        </div>
      </div>
    </div>
  </div>,
  "nodes": Array [
    <div
      className="Admin"
    >
      <div
        className="row"
      >
        
        <Navigator
          activeRoute={[Function]}
          clearForm={[Function]}
        />
        <div
          className="col s12 m12 l8 "
        >
          
          <div
            className="card "
            style={
              Object {
                "backgroundColor": "#FBFCFC",
                "marginTop": 20,
              }
            }
          >
            <div
              className="card-content "
            >
              
              <Form
                activeRoute={[Function]}
                handleProgress={[Function]}
                handleSubmit={[Function]}
                handleUploadError={[Function]}
                handleUploadStart={[Function]}
                handleUploadSuccess={[Function]}
                loader={undefined}
                onChange={[Function]}
                state={
                  Object {
                    "avatar": "",
                    "avatarURL": "",
                    "capacity": "",
                    "description": "",
                    "image": "",
                    "isUploading": false,
                    "location": "",
                    "name": "",
                    "price": "",
                    "progress": 0,
                    "username": "",
                  }
                }
              />
            </div>
          </div>
        </div>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_context": Object {},
      "_currentElement": <Admin
        centers={
          Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ]
        }
        errorAction={[Function]}
        getCenters={[Function]}
        getSingle={[Function]}
        location={
          Object {
            "pathname": "edit",
          }
        }
        mock="hello"
        params={
          Object {
            "id": 1,
          }
        }
        single="hello"
      />,
      "_instance": Admin {
        "_reactInternalInstance": [Circular],
        "activeRoute": [Function],
        "clearForm": [Function],
        "closeErrMsg": [Function],
        "context": Object {},
        "getMore": [Function],
        "handleProgress": [Function],
        "handleSubmit": [Function],
        "handleUploadError": [Function],
        "handleUploadStart": [Function],
        "handleUploadSuccess": [Function],
        "onChange": [Function],
        "props": Object {
          "centers": Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ],
          "errorAction": [Function],
          "getCenters": [Function],
          "getSingle": [Function],
          "location": Object {
            "pathname": "edit",
          },
          "mock": "hello",
          "params": Object {
            "id": 1,
          },
          "single": "hello",
        },
        "refs": Object {},
        "searchCenter": [Function],
        "state": Object {
          "avatar": "",
          "avatarURL": "",
          "capacity": "",
          "description": "",
          "image": "",
          "isUploading": false,
          "location": "",
          "name": "",
          "price": "",
          "progress": undefined,
          "username": "",
        },
        "updateCenter": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 9,
      "_nativeContainerInfo": null,
      "_nativeParent": null,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="Admin"
        >
          <div
            className="row"
          >
            
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              <div
                className="card "
                style={
                  Object {
                    "backgroundColor": "#FBFCFC",
                    "marginTop": 20,
                  }
                }
              >
                <div
                  className="card-content "
                >
                  
                  <Form
                    activeRoute={[Function]}
                    handleProgress={[Function]}
                    handleSubmit={[Function]}
                    handleUploadError={[Function]}
                    handleUploadStart={[Function]}
                    handleUploadSuccess={[Function]}
                    loader={undefined}
                    onChange={[Function]}
                    state={
                      Object {
                        "avatar": "",
                        "avatarURL": "",
                        "capacity": "",
                        "description": "",
                        "image": "",
                        "isUploading": false,
                        "location": "",
                        "name": "",
                        "price": "",
                        "progress": undefined,
                        "username": "",
                      }
                    }
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
        "_renderedOutput": <div
          className="Admin"
        >
          <div
            className="row"
          >
            
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              <div
                className="card "
                style={
                  Object {
                    "backgroundColor": "#FBFCFC",
                    "marginTop": 20,
                  }
                }
              >
                <div
                  className="card-content "
                >
                  
                  <Form
                    activeRoute={[Function]}
                    handleProgress={[Function]}
                    handleSubmit={[Function]}
                    handleUploadError={[Function]}
                    handleUploadStart={[Function]}
                    handleUploadSuccess={[Function]}
                    loader={undefined}
                    onChange={[Function]}
                    state={
                      Object {
                        "avatar": "",
                        "avatarURL": "",
                        "capacity": "",
                        "description": "",
                        "image": "",
                        "isUploading": false,
                        "location": "",
                        "name": "",
                        "price": "",
                        "progress": undefined,
                        "username": "",
                      }
                    }
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": null,
      "_topLevelWrapper": null,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Admin
    centers={
      Array [
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 33,
              "userId": 11,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium3",
          "price": 400,
        },
      ]
    }
    errorAction={[Function]}
    getCenters={[Function]}
    getSingle={[Function]}
    location={
      Object {
        "pathname": "edit",
      }
    }
    mock="hello"
    params={
      Object {
        "id": 1,
      }
    }
    single="hello"
  />,
}
`;

exports[`Test suites for Home component renders without crashing 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="Admin"
  >
    <div
      className="row"
    >
      <div
        className="col l12 s12"
      >
        <div
          className="w3-bar"
        >
          <span
            className="col l3"
          />
          <div
            className="col l9 s12"
          >
            <input
              className="w3-bar-item w3-input"
              name="search"
              onChange={[Function]}
              placeholder="Enter a search value..."
              type="text"
            />
          </div>
        </div>
      </div>
      <Navigator
        activeRoute={[Function]}
        clearForm={[Function]}
      />
      <div
        className="col s12 m12 l8 "
      >
        
        
      </div>
    </div>
  </div>,
  "nodes": Array [
    <div
      className="Admin"
    >
      <div
        className="row"
      >
        <div
          className="col l12 s12"
        >
          <div
            className="w3-bar"
          >
            <span
              className="col l3"
            />
            <div
              className="col l9 s12"
            >
              <input
                className="w3-bar-item w3-input"
                name="search"
                onChange={[Function]}
                placeholder="Enter a search value..."
                type="text"
              />
            </div>
          </div>
        </div>
        <Navigator
          activeRoute={[Function]}
          clearForm={[Function]}
        />
        <div
          className="col s12 m12 l8 "
        >
          
          
        </div>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_context": Object {},
      "_currentElement": <Admin
        centers={
          Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ]
        }
        errorAction={[Function]}
        getCenters={[Function]}
        location={
          Object {
            "pathname": "list_center",
          }
        }
        mock="hello"
      />,
      "_instance": Admin {
        "_reactInternalInstance": [Circular],
        "activeRoute": [Function],
        "clearForm": [Function],
        "closeErrMsg": [Function],
        "context": Object {},
        "getMore": [Function],
        "handleProgress": [Function],
        "handleSubmit": [Function],
        "handleUploadError": [Function],
        "handleUploadStart": [Function],
        "handleUploadSuccess": [Function],
        "onChange": [Function],
        "props": Object {
          "centers": Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ],
          "errorAction": [Function],
          "getCenters": [Function],
          "location": Object {
            "pathname": "list_center",
          },
          "mock": "hello",
        },
        "refs": Object {},
        "searchCenter": [Function],
        "state": Object {
          "avatar": "",
          "avatarURL": "",
          "capacity": "",
          "description": "",
          "image": "",
          "isUploading": false,
          "location": "",
          "name": "",
          "price": "",
          "progress": 0,
          "username": "",
        },
        "updateCenter": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_nativeContainerInfo": null,
      "_nativeParent": null,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="Admin"
        >
          <div
            className="row"
          >
            <div
              className="col l12 s12"
            >
              <div
                className="w3-bar"
              >
                <span
                  className="col l3"
                />
                <div
                  className="col l9 s12"
                >
                  <input
                    className="w3-bar-item w3-input"
                    name="search"
                    onChange={[Function]}
                    placeholder="Enter a search value..."
                    type="text"
                  />
                </div>
              </div>
            </div>
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              
            </div>
          </div>
        </div>,
        "_renderedOutput": <div
          className="Admin"
        >
          <div
            className="row"
          >
            <div
              className="col l12 s12"
            >
              <div
                className="w3-bar"
              >
                <span
                  className="col l3"
                />
                <div
                  className="col l9 s12"
                >
                  <input
                    className="w3-bar-item w3-input"
                    name="search"
                    onChange={[Function]}
                    placeholder="Enter a search value..."
                    type="text"
                  />
                </div>
              </div>
            </div>
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              
            </div>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": null,
      "_topLevelWrapper": null,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Admin
    centers={
      Array [
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 33,
              "userId": 11,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium3",
          "price": 400,
        },
      ]
    }
    errorAction={[Function]}
    getCenters={[Function]}
    location={
      Object {
        "pathname": "list_center",
      }
    }
    mock="hello"
  />,
}
`;

exports[`Test suites for Home component the admin page renders without crashing 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="Admin"
  >
    <div
      className="row"
    >
      <div
        className="col l12 s12"
      >
        <div
          className="w3-bar"
        >
          <span
            className="col l3"
          />
          <div
            className="col l9 s12"
          >
            <input
              className="w3-bar-item w3-input"
              name="search"
              onChange={[Function]}
              placeholder="Enter a search value..."
              type="text"
            />
          </div>
        </div>
      </div>
      <Navigator
        activeRoute={[Function]}
        clearForm={[Function]}
      />
      <div
        className="col s12 m12 l8 "
      >
        
        
      </div>
    </div>
  </div>,
  "nodes": Array [
    <div
      className="Admin"
    >
      <div
        className="row"
      >
        <div
          className="col l12 s12"
        >
          <div
            className="w3-bar"
          >
            <span
              className="col l3"
            />
            <div
              className="col l9 s12"
            >
              <input
                className="w3-bar-item w3-input"
                name="search"
                onChange={[Function]}
                placeholder="Enter a search value..."
                type="text"
              />
            </div>
          </div>
        </div>
        <Navigator
          activeRoute={[Function]}
          clearForm={[Function]}
        />
        <div
          className="col s12 m12 l8 "
        >
          
          
        </div>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_context": Object {},
      "_currentElement": <Admin
        centers={
          Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ]
        }
        errorAction={[Function]}
        getCenters={[Function]}
        location={
          Object {
            "pathname": "list_center",
          }
        }
        mock="hello"
      />,
      "_instance": Admin {
        "_reactInternalInstance": [Circular],
        "activeRoute": [Function],
        "clearForm": [Function],
        "closeErrMsg": [Function],
        "context": Object {},
        "getMore": [Function],
        "handleProgress": [Function],
        "handleSubmit": [Function],
        "handleUploadError": [Function],
        "handleUploadStart": [Function],
        "handleUploadSuccess": [Function],
        "onChange": [Function],
        "props": Object {
          "centers": Array [
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 33,
                  "userId": 11,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium",
              "price": 400,
            },
            Object {
              "description": "awesome place",
              "favorites": Array [
                Object {
                  "centerId": 36,
                  "userId": 88,
                },
              ],
              "name": "emporium3",
              "price": 400,
            },
          ],
          "errorAction": [Function],
          "getCenters": [Function],
          "location": Object {
            "pathname": "list_center",
          },
          "mock": "hello",
        },
        "refs": Object {},
        "searchCenter": [Function],
        "state": Object {
          "avatar": "",
          "avatarURL": "",
          "capacity": "",
          "description": "",
          "image": "",
          "isUploading": false,
          "location": "",
          "name": "",
          "price": "",
          "progress": 0,
          "username": "",
        },
        "updateCenter": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_nativeContainerInfo": null,
      "_nativeParent": null,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="Admin"
        >
          <div
            className="row"
          >
            <div
              className="col l12 s12"
            >
              <div
                className="w3-bar"
              >
                <span
                  className="col l3"
                />
                <div
                  className="col l9 s12"
                >
                  <input
                    className="w3-bar-item w3-input"
                    name="search"
                    onChange={[Function]}
                    placeholder="Enter a search value..."
                    type="text"
                  />
                </div>
              </div>
            </div>
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              
            </div>
          </div>
        </div>,
        "_renderedOutput": <div
          className="Admin"
        >
          <div
            className="row"
          >
            <div
              className="col l12 s12"
            >
              <div
                className="w3-bar"
              >
                <span
                  className="col l3"
                />
                <div
                  className="col l9 s12"
                >
                  <input
                    className="w3-bar-item w3-input"
                    name="search"
                    onChange={[Function]}
                    placeholder="Enter a search value..."
                    type="text"
                  />
                </div>
              </div>
            </div>
            <Navigator
              activeRoute={[Function]}
              clearForm={[Function]}
            />
            <div
              className="col s12 m12 l8 "
            >
              
              
            </div>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": null,
      "_topLevelWrapper": null,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Admin
    centers={
      Array [
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 33,
              "userId": 11,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium",
          "price": 400,
        },
        Object {
          "description": "awesome place",
          "favorites": Array [
            Object {
              "centerId": 36,
              "userId": 88,
            },
          ],
          "name": "emporium3",
          "price": 400,
        },
      ]
    }
    errorAction={[Function]}
    getCenters={[Function]}
    location={
      Object {
        "pathname": "list_center",
      }
    }
    mock="hello"
  />,
}
`;
